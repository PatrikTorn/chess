import React from 'react'
import {Piece, King, Queen, Rook, Bishop, Knight, Pawn} from './pieces';
import './App.css'
const AI_DEPTH = 2;
const BOT_IS_WHITE = true;
const DEBUG = true;
const test = [
  {
    it:1,
    ev:2,
    next:[
      {
        it:2,
        ev:3,
      }
    ]
  },
  {
    it:1,
    ev:2,
    next:[
      {
        it:2,
        ev:5,
      }
    ]
  }
];


// function iterate(root, maxs){
//   maxs.push(root.ev);
//   console.log(typeof root.next)
//   console.log(root.next );
//   if(root.next.length > 0){
//     for(let iteration of root.next){
//       const next = iteration.next;
//       maxs.push(iteration.ev);
//       if(next){
//         iterate(next, maxs)
//       }
//     }
//   }
  
//   return {...root, max:Math.max(...maxs)};
// }

// const ret = iterate(test, 0);

// console.log(ret);
// const neew = test.map(root => iterate(root, []))
// console.log(neew);


// let it = 0;
// while(!test.next){
//   it = it + 1;
//   console.log(it);
// }



export default class Chess extends React.Component {
    constructor(props){
        super(props);
        this.state = {
            board:[
                [new Rook(false),new Queen(false),new King(false),new Rook(false)],
                [new Pawn(false),new Pawn(false),new Pawn(false),new Pawn(false)],
                [new Pawn(true),new Pawn(true),new Pawn(true),new Pawn(true)],
                [new Rook(true),new Queen(true),new King(true),new Rook(true)]
            ],
            boardda: [
                [new Rook(false), new Knight(false), new Bishop(false), new Queen(false), new King(false), new Bishop(false), new Knight(false), new Rook(false)],
                [new Pawn(false),new Pawn(false),new Pawn(false),new Pawn(false), new Pawn(false),new Pawn(false),new Pawn(false),new Pawn(false)],
                [new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece()],
                [new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece()],
                [new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece()],
                [new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece(), new Piece()],
                [new Pawn(true),new Pawn(true),new Pawn(true),new Pawn(true), new Pawn(true),new Pawn(true),new Pawn(true),new Pawn(true)],
                [new Rook(true), new Knight(true), new Bishop(true), new Queen(true), new King(true), new Bishop(true), new Knight(true), new Rook(true)]
            ],
            boardddsa: [
              [new Rook(false), new Piece(), new Piece()],
              [new Knight(false), new Piece(), new Bishop(false)],
              [new Piece(), new Bishop(true), new Piece()]
            ],

            boardaq: [
              [new Rook(false),new Piece(), new Piece()],
              [new Knight(false), new Piece(), new Bishop(false)],
              [ new Piece(), new Bishop(true), new Piece()]
            ],
            boarddd: [
              // [new Pawn(false), new Pawn(false), new Knight(false), new Bishop(false)],
              [new Pawn(false),new Pawn(false),new Bishop(false),new Knight(false)],
              [new Piece(),new Piece(),new Piece(),new Piece()],
              [new Piece(),new Queen(false),new Piece(),new Piece()],
              [new Piece(),new Piece(),new Rook(true),new King(true)]
              // [new Pawn(true), new Pawn(true), new Queen(true), new Rook(true)]
            ],
            from:null,
            to:null,
            isWhiteTurn:true,
            activeLines:[],
            chessLines:[],
            possibleLines:{
              white:[],
              black:[]
            },
            possibleIterations:[],
            showMenu:false

        }
    }

    

    componentDidMount(){
      new Promise((resolve) => {
        this.updatePieces();
        const possibleLines = this.setPossibleLines();
        const possibleIterations = this.minimax(possibleLines, AI_DEPTH, this.state.board, true);
        this.formatPossibleIterations(possibleIterations);
        resolve();
      }).then(() => {
        if(!DEBUG){
          if(BOT_IS_WHITE){
            this.moveBot();
          }
        }

      })
    }



    updatePieces(state){
        const {board, activeLines, chessLines, possibleLines} = state || this.state;
        board.map((r, ri) => r.map((p, ci) => {
            p.setCoords(ri, ci);
            p.getLines({board, activeLines, chessLines, possibleLines});

        }));
        state || this.setState({board});
    }

    move(rowIndex, columnIndex, fromRi, fromCi){
      return new Promise((resolve, reject) => {
        console.log("MOVE!" , {rowIndex, columnIndex, fromRi, fromCi})
        let {from, board, isWhiteTurn} = this.state;
        if(fromRi > -1 && fromCi > -1){
          from = {
            ri:fromRi,
            ci:fromCi
          }
        }
        const fromPiece = board[from.ri][from.ci];
        const toPiece = board[rowIndex][columnIndex];
        if(fromPiece.type === "king"){
          board[rowIndex][columnIndex] = fromPiece;
          board[from.ri][from.ci] = new Piece();
          const isWhite = board[rowIndex][columnIndex].isWhite;
          const LAST_ROW = isWhite ? 7 : 0;
          const LAST_COLUMN = 7;
  
          // Short castling
          if(toPiece.ci - fromPiece.ci === 2){
            board[rowIndex][columnIndex-1] = board[LAST_ROW][LAST_COLUMN]
            board[LAST_ROW][LAST_COLUMN] = new Piece();
  
          // Long castling
          }else if(toPiece.ci - fromPiece.ci === -2){
            board[rowIndex][columnIndex+1] = board[LAST_ROW][0]
            board[LAST_ROW][0] = new Piece();
          }
        }else if(fromPiece.type === "pawn" && rowIndex === 0){
          board[rowIndex][columnIndex] = new Queen(true);
          board[from.ri][from.ci] = new Piece();
          
        }else{
          board[rowIndex][columnIndex] = board[from.ri][from.ci];
          board[from.ri][from.ci] = new Piece();
        }
  
        board[rowIndex][columnIndex].hasMoved = true;
        this.updatePieces();
        const possibleLines = this.setPossibleLines();

        this.setState({
            to:null, 
            from:null,
            board,
            isWhiteTurn:!isWhiteTurn
        })
        
        return resolve(possibleLines)
      })

    }

    isPossibleMove(ri, ci){
      // TODO: Not here, but diagonal-3: q,Kn,K
      const {from, board} = this.state;
      return from && board[from.ri][from.ci].lines.find(p => p.ri === ri && p.ci === ci)
    }

    onClickPiece(rowIndex, columnIndex){

      const {board, activeLines, chessLines, from, isWhiteTurn} = this.state;
      const fromPiece = board[rowIndex][columnIndex];
      // Not your turn
      if(!DEBUG && !from && (fromPiece.isWhite !== isWhiteTurn || !fromPiece.marker)){
        console.log("ASD")
        return
      }

      // From has set
      if(from){
        // Clicked same piece twice
        if(rowIndex === from.ri && columnIndex === from.ci){
          this.setState({from:null});
        }else{

          if(DEBUG){
            return this.move(rowIndex, columnIndex)
          }
          if(this.isPossibleMove(rowIndex, columnIndex)){
            this.move(rowIndex, columnIndex)
            .then((possibleLines) => {
              setTimeout(() => {
                if(this.state.isWhiteTurn === BOT_IS_WHITE){
                  const possibleIterations = this.minimax(possibleLines, AI_DEPTH, this.state.board, BOT_IS_WHITE);
                  this.formatPossibleIterations(possibleIterations);
                }
                this.moveBot();
                this.setState({isWhiteTurn:!BOT_IS_WHITE});
              }, 50);
              })

          }else{
            console.log("not possible move")
          }
        }

      // From has not set
      }else {
        const coords = {
          ri:rowIndex,
          ci:columnIndex
        };
        board[rowIndex][columnIndex].getLines({board, activeLines:this.setActiveLines(), chessLines:this.setChessLines()});
        this.setState({from:coords})
      }


    }

    getPieces(board = this.state.board){
      return board.reduce((acc, row) => {
        row.map(p => {
          acc.push(p);  
        });
        return acc;
      }, []);
    }

    setChessLines(newBoard){
      const board = newBoard || this.state.board;
      const pieces = this.getPieces(board);
      let chessLines = [];
      for(let attacker of pieces){
        for(let target of attacker.lines){
          if(target.type === "king"){
            chessLines.push({target, attacker});
          }
        }
      }
      newBoard || this.setState({chessLines});
      return chessLines
    }

    setActiveLines(newBoard){
      const board = newBoard || this.state.board;
      const pieces = this.getPieces(board);
      let activeLines = [];
      for(let piece of pieces){
          for(let line of piece.protectLines){
            activeLines.push({target:line, attacker:piece});
          }
      }
      newBoard || this.setState({activeLines});
      return activeLines
    }

    createBoard({board, attacker, target}){
      const PIECES = (isWhite, ri, ci) => ({
        king: new King(isWhite, ri, ci),
        queen: new Queen(isWhite, ri, ci),
        rook: new Rook(isWhite, ri, ci),
        bishop: new Bishop(isWhite, ri, ci),
        knight: new Knight(isWhite, ri, ci),
        pawn: new Pawn(isWhite, ri, ci),
        empty: new Piece(isWhite, ri, ci)
      })
      const newBoard = board.map((row, ri) => {
        return row.map((piece, ci) => {
          if(ri === attacker.ri && ci === attacker.ci){
            return new Piece(false, ri, ci);

          }else if(ri === target.ri && ci === target.ci){
            return PIECES(attacker.isWhite, ri, ci)[attacker.type]
          }
          else{
            return PIECES(piece.isWhite, ri, ci)[piece.type]
          }
        });
      });
      return newBoard;
    }

    evaluate(board){
      const pieces = this.getPieces(board);
      let evalution = 0;
      for(let piece of pieces){
        evalution += piece.evalution;
      }
      return evalution
    }

    minimax(possibleLines, depth, board, isWhite){
      if(depth === 0){
        const posLines = this.setPossibleLines(board);
        // const evaluation
        // const posLines = possibleLines;
        return {
          lineCount:{
            white:posLines.white.length,
            black:posLines.black.length
          },
        }
      }
      const possibleIterations = possibleLines[isWhite ? 'white' : 'black'].map(({attacker, target}) => {
        const newBoard = this.createBoard({board, attacker, target});
        const bestMove = (ev) => isWhite ? Math.min(9999, ev) : Math.max(-9999, ev);
        const posLines = this.setPossibleLines(newBoard);
        console.log({posLines});
        return {
          // newBoard,
          evaluation:this.evaluate(newBoard),
          lineCount:{
            white:posLines.white.length,
            black:posLines.black.length
          },
          posLines,
          attacker:attacker,
          target:target,
          next:this.minimax(posLines, depth - 1, newBoard, !isWhite),
          board:newBoard
        }
      });
      return possibleIterations
    }

    setPossibleLines(newBoard){
      const board = newBoard || this.state.board;
      const pieces = this.getPieces(board);
      let possibleLines = {
        white:[],
        black:[]
      };
      const activeLines = this.setActiveLines(board);
      const chessLines = this.setChessLines(board);
      
      for(let piece of pieces){
        piece.getLines({board, activeLines, chessLines});
        for(let line of piece.lines){
            possibleLines[piece.isWhite ? 'white' : 'black'].push({
              target:line, 
              attacker:piece,
              positionWin: piece.positionRanks[line.ri][line.ci]
            });
        }
      }
      newBoard || this.setState({possibleLines});
      console.log({possibleLines});
      return possibleLines
    }


    formatPossibleIterations(possibleIterations){
      const player = BOT_IS_WHITE ? 'black' : 'white';
      possibleIterations = possibleIterations
      .map(it => {
        const optims = this.getMini2(it, it.attacker.isWhite, {lineCounts:{black:[], white:[]}, mini:[]})
        return({
          mini:optims.mini,
          // mini:this.getMini(it, it.attacker.isWhite),
          positionWin:it.attacker.positionRanks[it.target.ri][it.target.ci] - it.attacker.positionRanks[it.attacker.ri][it.attacker.ci],
          // lineCounts:this.getWorstLineCount(it),
          lineCounts:optims.lineCounts,
          ...it,
        })
      })
      .filter(p => p.lineCounts[BOT_IS_WHITE ? 'white' : 'black'] !== 0)
      .sort((a,b) => 
        (a.lineCounts[player] === 0 &&  b.lineCounts[player] === 0) || 
        (BOT_IS_WHITE ? b.mini-a.mini : a.mini - b.mini) || 
        (BOT_IS_WHITE ? b.evaluation-a.evaluation :a.evaluation - b.evaluation) || 
        (b.positionWin - a.positionWin)
      );
      // *0.9 + (b.worstLineCount - a.worstLineCount)*0.1
      this.setState({possibleIterations});
    }

    getWorstLineCount(it1){
      let blacks = [], whites = [];
      for(let it2 of it1.next){
        blacks.push(it2.lineCount.black);
        whites.push(it2.lineCount.white);
        if(it2.next){
          for(let it3 of it2.next){
            blacks.push(it3.lineCount.black);
            whites.push(it3.lineCount.white);
            // blacks.push(it3.next.lineCount.black);
            // whites.push(it3.next.lineCount.white);            
          }
        }


        // if(it2.next.lineCount){
        //   for(let it3 of it2.next){
        //     retVal.push(it3.lineCount);
        //   }
        // }
      }
      return {
        white: Math.min(...whites),
        black: Math.min(...blacks)
      }
    }

    getMini2(root, isWhite, optims){
      optims.mini.push(root.evaluation);
      optims.lineCounts.white.push(root.lineCount.white)
      optims.lineCounts.black.push(root.lineCount.black)
      const next = root.next;
      if(root.next.length > 0){
      for(let iteration of next){
          optims.lineCounts.white.push(iteration.lineCount.white)
          optims.lineCounts.black.push(iteration.lineCount.black)
          optims.mini.push(iteration.evaluation);
          if(iteration.next){
            this.getMini2(iteration, isWhite, optims);
          }
        }
      }
      console.log(optims);
      return {
        mini:isWhite ? Math.max(...optims.mini) : Math.min(...optims.mini),
        lineCounts:{
          white:Math.min(...optims.lineCounts.white),
          black:Math.min(...optims.lineCounts.black)
        }
      }
    }

    getMini(it1, isWhite){
      let retVal = [];
      for(let it2 of it1.next){
        retVal.push(it2.evaluation);
        if(it2.next.next){
          for(let it3 of it2.next){
            retVal.push(it3.evaluation);
          }
        }
      }
      
      if(isWhite){
        return Math.min(...retVal);
      }else{
        return Math.max(...retVal);
      }

    }

    moveBot(){
      const {possibleIterations, possibleLines} = this.state;
      const posBot = possibleLines[BOT_IS_WHITE ? 'white' : 'black'];
      let from, to;
      if(posBot.length > 0){
        if(possibleIterations.length > 0 ){
          const best = possibleIterations[0];
          from = {
            ri:best.attacker.ri,
            ci:best.attacker.ci
          }
          to = {
            ri:best.target.ri,
            ci:best.target.ci
          }
        }else{
          const random = posBot[Math.floor(Math.random()*posBot.length)];
          from = {
            ri:random.attacker.ri,
            ci:random.attacker.ci
          }
          to = {
            ri:random.target.ri,
            ci:random.target.ci
          }
        }
        this.move(to.ri, to.ci, from.ri, from.ci);
      }else{
        alert("Shakkimatti");
      }
    }

    renderBoard(board, isMini){
      const {from, activeLines, possibleLines} = this.state;
      const isActive = (ri, ci) => from && from.ri === ri && from.ci === ci;
      return(
        <div className={isMini ? "board-mini" : "board"}>
          {
              board.map((row, ri) => (
                  <div style={styles.row} key={ri}>
                      {row.map((piece, ci) => (
                          <div 
                              key={ci}
                              style={styles.piece({
                                  possible:this.isPossibleMove(ri,ci), 
                                  active:isActive(ri,ci),
                                  dark:(ri+ci)%2 === 0,
                                  background:piece.icon,
                                  activeLineWhite:activeLines.find(a => a.attacker.isWhite && a.ri === ri && a.ci === ci),
                                  activeLineBlack:activeLines.find(a => !a.attacker.isWhite && a.ri === ri && a.ci === ci),
                                  isMini:true
                              })}
                              onClick={() => this.onClickPiece(ri, ci)}
                            ></div>
                      ))}
                  </div>
              ))
          }
      </div>
      )
    }

    toggleMenu(){
      this.setState({showMenu:!this.state.showMenu})
    }
    render(){
        console.log('state', this.state);
        const {board, from, possibleIterations} = this.state;
        const isActive = (ri, ci) => from && from.ri === ri && from.ci === ci;
        // const isPossible = (ri, ci) => from && board[from.ri][from.ci].lines.find(p => p.ri === ri && p.ci === ci);
        // <h1>Turn:{isWhiteTurn ? "White" : "Black"} </h1>
        // <p>Possible lines:</p>
        // <div>White: {possibleLines.white.length}</div>
        // <div>Black: {possibleLines.black.length}</div>
        // 
        const evaluation = this.evaluate(this.state.board)/10;
        
        return this.state.showMenu ? 
        (
          <div style={styles.wrapper}>
              <div style={styles.menu} onClick={() => this.toggleMenu()}>?</div>
              {
                possibleIterations.map(it => 
                  <div style={{display:'flex', flexDirection:'row'}}>
                  <div style={{flex:0.5}}>{this.renderBoard(this.state.board, true)}</div>
                    <div style={{flex:0.5}}>{this.renderBoard(it.board, true)}</div>
                    <div style={{flex:0.5}}>{it.next[0] && this.renderBoard(it.next[0].board, true)}</div>
                    <div style={{flex:0.5}}>{it.next[0].next[0] && this.renderBoard(it.next[0].next[0].board, true)}</div>
                  </div>
                )
              }
          </div>
        )
        : (
          <div style={styles.wrapper} className="wrapper">
            <div style={styles.menu} onClick={() => this.toggleMenu()}>?</div> 
            <div style={styles.container}>
                <div style={styles.details}>
                    <div>Patsibot ({-evaluation >= 0 && '+'}{-evaluation})</div>
                    {!this.state.isWhiteTurn && <div>Miettii....</div>}
                    
                </div>
                {this.renderBoard(board, false)}
                <div style={styles.details}>
                    <div>Minä ({evaluation >= 0 && '+'}{evaluation})</div>
                </div>
            </div>
          </div>
        )
    }
}

const styles = {
    wrapper:{
      position:'absolute',
      left:0,
      top:0,
      right:0,
      bottom:0,
      backgroundColor:'#404040',
    },
    container:{
      position:'relative',
      top:0,
      left:0,
      right:0,
      bottom:0,
      margin:'auto',
      display:'table',
    },
    menu:{
      position:'fixed',
      top:10,
      left:10,
      width:30,
      height:30,
      backgroundColor:'rgba(255,255,255,0.3)',
      borderRadius:5,
      textAlign:'center',
      fontSize:22,
      color:'white',
      cursor:'pointer'
    },
    details:{
      backgroundColor:'#2F4F4F',
      width:'70vh',
      height:'10vh',
      display:'table-row',
      color:'white',
      textAlign:'center'
    },
    row:{
        display:'table-row'
    },
    piece:({possible, active, dark, background, activeLineWhite, activeLineBlack, isMini}) =>  ({
        width:isMini ? 20 :60,
        height:isMini ? 20 : 60,
        // backgroundColor: activeLineWhite && activeLineBlack ? 'gray' : (activeLineBlack ? 'darkgray' : (activeLineWhite ? 'white' : 'orange')),
        backgroundColor: active ? '#ffffff' : (possible ? '#baca44' : dark ? '#769656' : '#eeeed2'),
        backgroundImage: `url(${background})`,
        backgroundRepeat:'no-repeat',
        backgroundSize:'cover',
        borderRight:'1px solid black',
        borderBottom:'1px solid black',
        display:'table-cell',
        lineHeight:'100px',
        textAlign:'center',
        cursor:'pointer'
    })
}